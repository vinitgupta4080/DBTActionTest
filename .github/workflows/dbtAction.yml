name: Detect Column Changes and List Changed Files

on:
  pull_request:
    paths:
      - "models/**" # Monitor changes only in the models directory

jobs:
  detect-and-report:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0 # Fetch full history to ensure proper diff

    - name: Fetch target branch
      run: |
        git fetch origin $GITHUB_BASE_REF:$GITHUB_BASE_REF

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyyaml jsondiff requests

    - name: Detect column changes and list files
      id: detect_changes
      run: |
        python - <<EOF
        import os
        import json
        import yaml
        from jsondiff import diff

        # Paths and setup
        BASE_MODELS_DIR = "models"
        TARGET_BRANCH = os.environ.get("GITHUB_BASE_REF", "main")
        PREVIOUS_MODEL_PATH = "previous_model"
        
        def get_model_columns_NEW(file_path):
          if file_path.endswith(".json"):
            with open(file_path, "r") as f:
              data = json.load(f)
          elif file_path.endswith(".yml") or file_path.endswith(".yaml"):
            with open(file_path, "r") as f:
              data = yaml.safe_load(f)
          else:
            raise ValueError(f"Unsupported file type: {file_path}")
          columns = set()
          for model in data.get("models", []):
            for column in model.get("columns", []):
              column_name = column.get("name")
              if column_name:
                columns.add(column_name)
          return columns
      
        # Fetch changed files
        changed_files = os.popen(f'git diff --name-only origin/{TARGET_BRANCH}').read().splitlines()
        print("Changed files:", changed_files)

        dbt_models = [f for f in changed_files if f.startswith(BASE_MODELS_DIR) and (f.endswith(".json") or f.endswith(".yml") or f.endswith(".yaml"))]

        # Detect column changes
        column_changes = {}
        for model in dbt_models:
            file_extension = os.path.splitext(model)[1]
            previous_model_path = f"{PREVIOUS_MODEL_PATH}{file_extension}"

            # Get previous version of the file
            try:
                os.system(f'git show origin/{TARGET_BRANCH}:{model} > {previous_model_path}')

                if os.path.exists(previous_model_path):
                    prev_columns = get_model_columns_NEW(previous_model_path)
                    print("prev_columns:", prev_columns)

                    current_columns = get_model_columns_NEW(model)
                    print("current_columns:", current_columns)
                    changes = prev_columns - current_columns
                    if changes:
                        column_changes[model] = changes
            except Exception as e:
                print(f"Error processing {model}: {e}")
            finally:
                if os.path.exists(previous_model_path):
                    os.remove(previous_model_path)

        # Save results
        print("ChangedFIles and Columns", column_changes)
        #with open('changed_files.json', 'w') as f:
            #json.dump({"changed_files": list(changed_files)}, f)
        print(type(column_changes))
        #with open('column_changes.json', 'w') as f:
            #json.dump(column_changes, f)
        
        if column_changes:
            print(type(column_changes))
            #print(f"::set-output name=columns::{json.dumps(column_changes)}")
        else:
            print("No column changes detected.")
        #print(type(changed_files))
        #print(f"::set-output name=changed_files::{json.dumps(list(changed_files))}")
    - name: Comment on pull request
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const changedFiles = JSON.parse(fs.readFileSync('changed_files.json', 'utf8')).changed_files;
          const columnChanges = JSON.parse(fs.readFileSync('column_changes.json', 'utf8'));

          const changedFilesList = changedFiles.length > 0
            ? `**Changed Files:**\n- ${changedFiles.join('\n- ')}\n\n`
            : 'No files were changed.\n';

          const columnChangesList = Object.keys(columnChanges).length > 0
            ? `**Column Changes:**\n${Object.entries(columnChanges).map(([model, cols]) => `- **${model}**: ${cols.join(', ')}`).join('\n')}\n`
            : 'No column changes detected.\n';

          github.rest.issues.createComment({
            issue_number: context.payload.pull_request.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `${changedFilesList}${columnChangesList}`,
          });
