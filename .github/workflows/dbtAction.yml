name: Detect Column Changes in DBT Models

on:
  pull_request:
    paths:
      - "models/**" # Monitor only changes in the models directory

jobs:
  detect-and-report:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0 # Fetch full history to ensure proper diff

    - name: Fetch target branch
      run: |
        git fetch origin ${{ github.base_ref }}:$GITHUB_BASE_REF

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyyaml jsondiff requests

    - name: Detect column changes
      id: detect_changes
      run: |
        python - <<EOF
        import os
        import json
        import yaml
        from jsondiff import diff

        # Paths and setup
        BASE_MODELS_DIR = "models"
        TARGET_BRANCH = os.environ.get("GITHUB_BASE_REF", "main")
        PREVIOUS_MODEL_PATH = "previous_model"

        # Helper to parse model files
        def get_model_columns(file_path):
            if file_path.endswith(".json"):
                with open(file_path, "r") as f:
                    data = json.load(f)
            elif file_path.endswith(".yml") or file_path.endswith(".yaml"):
                with open(file_path, "r") as f:
                    data = yaml.safe_load(f)
            else:
                raise ValueError(f"Unsupported file type: {file_path}")

            return {col['name'] for col in data.get('columns', [])}

        # Fetch changed files
        changed_files = os.popen(f'git diff --name-only {TARGET_BRANCH}').read().splitlines()
        dbt_models = [f for f in changed_files if f.startswith(BASE_MODELS_DIR) and (f.endswith(".json") or f.endswith(".yml") or f.endswith(".yaml"))]
        print("changed dbt models files:", dbt_models)

        # Detect column changes
        column_changes = {}
        for model in dbt_models:
            file_extension = os.path.splitext(model)[1]
            previous_model_path = f"{PREVIOUS_MODEL_PATH}{file_extension}"

            # Get previous version of the file
            os.system(f'git show {TARGET_BRANCH}:{model} > {previous_model_path}')

            if os.path.exists(previous_model_path):
                try:
                    prev_columns = get_model_columns(previous_model_path)
                    current_columns = get_model_columns(model)

                    changes = diff(prev_columns, current_columns)
                    if changes:
                        column_changes[model] = list(changes.keys())
                except Exception as e:
                    print(f"Error processing {model}: {e}")
                finally:
                    os.remove(previous_model_path)

        # Output the result
        with open('column_changes.json', 'w') as f:
            json.dump(column_changes, f)

        if column_changes:
            print(f"::set-output name=columns::{json.dumps(column_changes)}")
        else:
            print("No column changes detected.")
        EOF

    - name: Post detected changes to Alation
      if: steps.detect-changes.outputs.columns != 'null'
      run: |
        python - <<EOF
        import os
        import json
        import requests

        ALATION_API_URL = os.getenv("ALATION_API_URL")
        ALATION_API_TOKEN = os.getenv("ALATION_API_TOKEN")

        with open('column_changes.json', 'r') as f:
            column_changes = json.load(f)

        # Send data to Alation
        headers = {"Authorization": f"Bearer {ALATION_API_TOKEN}"}
        for model, columns in column_changes.items():
            payload = {
                "model": model,
                "columns": columns
            }
            response = requests.post(ALATION_API_URL, headers=headers, json=payload)
            print(response.json())
        EOF

    - name: Comment on pull request
      uses: actions/github-script@v6
      with:
        script: |
          const columns = JSON.parse(process.env.COLUMNS || '{}');
          const commentBody = columns
            ? `The following columns were updated in the DBT models:\n\n${Object.entries(columns).map(([model, cols]) => `**${model}**:\n- ${cols.join('\n- ')}`).join('\n\n')}`
            : 'No column changes detected.';

          github.rest.issues.createComment({
            issue_number: context.payload.pull_request.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: commentBody,
          });
